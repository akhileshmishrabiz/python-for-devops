import requests
import json
import time
from typing import List, Dict, Optional

def fetch_cve_details(cve_ids: List[str]) -> Dict[str, Optional[Dict]]:
    """
    Fetch CVE details from the NIST NVD API
    
    Args:
        cve_ids: List of CVE IDs (e.g., ['CVE-2021-44228', 'CVE-2022-21449'])
    
    Returns:
        Dictionary mapping CVE IDs to their details or None if not found
    """
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    results = {}
    
    # Process CVE IDs in chunks to avoid rate limiting
    chunk_size = 5
    for i in range(0, len(cve_ids), chunk_size):
        chunk = cve_ids[i:i+chunk_size]
        
        for cve_id in chunk:
            # Ensure proper CVE ID format
            if not cve_id.startswith("CVE-"):
                cve_id = f"CVE-{cve_id}" if "-" in cve_id else f"CVE-{cve_id}"
            
            params = {"cveId": cve_id}
            
            try:
                response = requests.get(base_url, params=params)
                
                # Check if request was successful
                if response.status_code == 200:
                    data = response.json()
                    
                    # Check if vulnerabilities were found
                    if data.get("totalResults", 0) > 0 and "vulnerabilities" in data:
                        vulnerability = data["vulnerabilities"][0]["cve"]
                        
                        # Extract relevant information
                        results[cve_id] = {
                            "description": vulnerability.get("descriptions", [{}])[0].get("value", "No description available"),
                            "published": vulnerability.get("published"),
                            "lastModified": vulnerability.get("lastModified"),
                            "severity": get_severity(vulnerability)
                        }
                    else:
                        results[cve_id] = None
                else:
                    print(f"Error fetching {cve_id}: Status code {response.status_code}")
                    results[cve_id] = None
                    
            except Exception as e:
                print(f"Exception when fetching {cve_id}: {e}")
                results[cve_id] = None
            
            # Wait a bit to avoid rate limiting
            time.sleep(0.6)
    
    return results

def get_severity(vulnerability: Dict) -> Optional[Dict]:
    """Extract severity metrics from vulnerability data"""
    metrics = vulnerability.get("metrics", {})
    
    # Check different metric systems (CVSS v3.1, v3.0, v2.0)
    for metric_type in ["cvssMetricV31", "cvssMetricV30", "cvssMetricV2"]:
        if metric_type in metrics and metrics[metric_type]:
            cvss_data = metrics[metric_type][0]
            if "cvssData" in cvss_data:
                return {
                    "type": metric_type,
                    "baseScore": cvss_data["cvssData"].get("baseScore"),
                    "baseSeverity": cvss_data["cvssData"].get("baseSeverity", "N/A"),
                    "vector": cvss_data["cvssData"].get("vectorString", "N/A")
                }
    
    return None

# Example usage
if __name__ == "__main__":
    # Example list of CVE IDs
    cve_list = [
        "CVE-2020-11023",  
        "CVE-2020-17049",  
        "CVE-2014-0160"    # Heartbleed
    ]
    
    cve_details = fetch_cve_details(cve_list)
    
    # Print results in a readable format
    for cve_id, details in cve_details.items():
        print(f"\n{cve_id}:")
        if details:
            print(f"  Description: {details['description']}")
            print(f"  Published: {details['published']}")
            
            if details['severity']:
                print(f"  Severity: {details['severity']['baseSeverity']} ({details['severity']['baseScore']})")
                print(f"  Vector: {details['severity']['vector']}")
        else:
            print("  No details found")
