import pandas as pd
import requests
import time
import re
import os
from dotenv import load_dotenv
from bs4 import BeautifulSoup
from openpyxl import load_workbook
from datetime import datetime
from googlesearch import search
import random

# Load environment variables from .env file
load_dotenv()

# Get certificate paths from .env file
CERT_PATH = os.getenv('REDHAT_CERT_PATH')
KEY_PATH = os.getenv('REDHAT_KEY_PATH')
CA_PATH = os.getenv('REDHAT_CA_PATH')

# API URLs and Sources
CISA_API_URL = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
REDHAT_API_URL = "https://access.redhat.com/labs/securitydataapi/cve"
SECURITYFOCUS_URL = "https://www.securityfocus.com/bid/"
EXPLOITDB_URL = "https://www.exploit-db.com/search?cve="

def get_headers():
    """
    Return common headers for API requests
    """
    return {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/json'
    }

def get_cisa_data():
    """
    Fetch CISA KEV catalog data
    """
    try:
        print("Fetching CISA KEV catalog...")
        response = requests.get(CISA_API_URL, headers=get_headers())
        response.raise_for_status()
        data = response.json()
        print(f"Successfully fetched CISA data with {len(data.get('vulnerabilities', []))} vulnerabilities")
        return data
    except Exception as e:
        print(f"Error fetching CISA data: {str(e)}")
        return None

def get_redhat_info(cve_id):
    """
    Fetch vulnerability information from Red Hat Security Data API using SSL certificate
    """
    try:
        print(f"Fetching Red Hat info for {cve_id}...")
        
        # Create SSL context with certificate files
        cert_files = None
        verify = True
        
        # Check if certificate paths are provided
        if CERT_PATH and KEY_PATH:
            cert_files = (CERT_PATH, KEY_PATH)
        
        # Use CA certificate if provided
        if CA_PATH:
            verify = CA_PATH
        
        response = requests.get(
            f"{REDHAT_API_URL}/{cve_id}.json", 
            headers=get_headers(),
            cert=cert_files,
            verify=verify
        )
        
        if response.status_code == 200:
            data = response.json()
            name = data.get('bugzilla', {}).get('description', '')
            if not name:
                name = data.get('details', '').split('.')[0] if data.get('details') else ''
            
            print(f"Found Red Hat info for {cve_id}")
            return {
                'name': name,
                'description': data.get('details', ''),
                'severity': data.get('threat_severity', '').upper(),
                'source': 'Red Hat',
                'date_added': data.get('public_date', ''),
                'required_action': data.get('mitigation', 'Review and patch if applicable')
            }
        else:
            print(f"No Red Hat info found for {cve_id}")
    except Exception as e:
        print(f"Error fetching from Red Hat for {cve_id}: {str(e)}")
    return None

def get_securityfocus_info(cve_id):
    """
    Fetch vulnerability information from SecurityFocus
    """
    try:
        print(f"Fetching SecurityFocus info for {cve_id}...")
        # First get the BID from CVE
        response = requests.get(f"https://www.securityfocus.com/cve/{cve_id}", headers=get_headers())
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            bid_link = soup.find('a', href=re.compile(r'/bid/\d+'))
            if bid_link:
                bid = bid_link['href'].split('/')[-1]
                # Now get the vulnerability name from BID
                response = requests.get(f"{SECURITYFOCUS_URL}{bid}", headers=get_headers())
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    name = soup.find('h1').text.strip() if soup.find('h1') else ''
                    if name:
                        print(f"Found SecurityFocus info for {cve_id}")
                        return {
                            'name': name,
                            'source': 'SecurityFocus',
                            'date_added': datetime.now().strftime('%Y-%m-%d')
                        }
    except Exception as e:
        print(f"Error fetching from SecurityFocus for {cve_id}: {str(e)}")
    return None

def combine_vulnerability_info(cve_id, cisa_data):
    """
    Combine vulnerability information from CISA and other sources
    """
    result = {
        'name': '',
        'description': '',
        'severity': '',
        'source': '',
        'date_added': '',
        'required_action': '',
        'additional_info': ''
    }
    
    sources_info = []
    
    # Try CISA KEV first
    if cisa_data and 'vulnerabilities' in cisa_data:
        for vuln in cisa_data['vulnerabilities']:
            if vuln.get('cveID') == cve_id:
                print(f"Found in CISA KEV: {vuln.get('vulnerabilityName')}")
                sources_info.append({
                    'name': vuln.get('vulnerabilityName', ''),
                    'description': vuln.get('shortDescription', ''),
                    'severity': 'HIGH',  # All KEV vulnerabilities are considered high risk
                    'source': 'CISA KEV',
                    'date_added': vuln.get('dateAdded', ''),
                    'required_action': vuln.get('requiredAction', ''),
                    'priority': 1  # CISA gets highest priority
                })
    
    # Get Red Hat info
    redhat_info = get_redhat_info(cve_id)
    if redhat_info:
        print(f"Found in Red Hat: {redhat_info.get('name')}")
        redhat_info['priority'] = 2
        sources_info.append(redhat_info)
    
    if not sources_info:
        print(f"No information found for {cve_id}")
        return result
    
    # Sort by priority
    sources_info.sort(key=lambda x: x.get('priority', 999))
    
    # Use highest priority source as base
    primary_source = sources_info[0]
    result.update({
        'name': primary_source.get('name', ''),
        'description': primary_source.get('description', ''),
        'severity': primary_source.get('severity', ''),
        'source': primary_source.get('source', ''),
        'date_added': primary_source.get('date_added', ''),
        'required_action': primary_source.get('required_action', '')
    })
    
    # Combine additional information from other sources
    additional_info = []
    for source in sources_info[1:]:
        if source.get('description') and source.get('description') != result['description']:
            additional_info.append(f"Additional info from {source['source']}: {source['description']}")
    
    if additional_info:
        result['additional_info'] = ' | '.join(additional_info)
    
    print(f"Final result for {cve_id}:")
    print(f"Name: {result['name']}")
    print(f"Source: {result['source']}")
    print(f"Severity: {result['severity']}")
    
    return result

def add_vulnerability_info(input_file, output_file):
    """
    Process Excel file and add vulnerability information from CISA and Red Hat
    """
    # Read Excel file
    print(f"Reading input file: {input_file}")
    df = pd.read_excel(input_file)
    print(f"Found {len(df)} CVE IDs to process")
    
    # Add new columns if they don't exist
    new_columns = ['Vulnerability Name', 'Description', 'Severity', 'Source', 'Date Added', 
                  'Required Action', 'Additional Information']
    for col in new_columns:
        if col not in df.columns:
            df[col] = ""
    
    # Fetch CISA data once
    cisa_data = get_cisa_data()
    
    # Process each CVE
    total_cves = len(df)
    for index, row in df.iterrows():
        cve_id = row['CVE ID']  # Assuming column is named 'CVE ID'
        if pd.notna(cve_id) and isinstance(cve_id, str):
            cve_id = cve_id.strip()  # Remove any whitespace
            print(f"\nProcessing {cve_id} ({index + 1}/{total_cves})...")
            
            # Get combined vulnerability information
            info = combine_vulnerability_info(cve_id, cisa_data)
            
            # Update DataFrame
            df.at[index, 'Vulnerability Name'] = info['name']
            df.at[index, 'Description'] = info['description']
            df.at[index, 'Severity'] = info['severity']
            df.at[index, 'Source'] = info['source']
            df.at[index, 'Date Added'] = info['date_added']
            df.at[index, 'Required Action'] = info['required_action']
            df.at[index, 'Additional Information'] = info['additional_info']
            
            time.sleep(2)  # API rate limit compliance
            
            # Save progress every 5 CVEs
            if (index + 1) % 5 == 0:
                df.to_excel(output_file, index=False)
                print(f"Progress saved after {index + 1} CVEs")
    
    # Final save
    df.to_excel(output_file, index=False)
    print(f"\nResults saved to {output_file}")
    print("Processing complete!")

# Example usage
if __name__ == "__main__":
    input_excel = "cve_data.xlsx"  # Your input file
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_excel = f"cve_list_with_details_{timestamp}.xlsx"  # Output file with timestamp
    add_vulnerability_info(input_excel, output_excel)




##############
# .env file content
# # Red Hat API SSL Certificate Configuration
# REDHAT_CERT_PATH=/path/to/your/certificate.crt
# REDHAT_KEY_PATH=/path/to/your/private.key
# REDHAT_CA_PATH=/path/to/your/ca.crt

# # either run 
# pip install python-dotenv

# or put this in requirements.txt and run pip install -r requirements.txt
