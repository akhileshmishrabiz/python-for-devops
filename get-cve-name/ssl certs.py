# pip install python-dotenv

# # create a .env file in same folder and put below content
# # Red Hat API SSL Certificate Configuration
# REDHAT_CERT_PATH=/path/to/your/certificate.crt
# REDHAT_KEY_PATH=/path/to/your/private.key
# REDHAT_CA_PATH=/path/to/your/ca.crt



import os
from dotenv import load_dotenv
import requests

# Load environment variables from .env file
load_dotenv()

# Get certificate paths from .env file
CERT_PATH = os.getenv('REDHAT_CERT_PATH')
KEY_PATH = os.getenv('REDHAT_KEY_PATH')
CA_PATH = os.getenv('REDHAT_CA_PATH')

def get_redhat_info(cve_id):
    """
    Fetch vulnerability information from Red Hat Security Data API using SSL certificate
    """
    try:
        print(f"Fetching Red Hat info for {cve_id}...")
        
        # Create SSL context with certificate files
        cert_files = None
        verify = True
        
        # Check if certificate paths are provided
        if CERT_PATH and KEY_PATH:
            cert_files = (CERT_PATH, KEY_PATH)
        
        # Use CA certificate if provided
        if CA_PATH:
            verify = CA_PATH
        
        response = requests.get(
            f"{REDHAT_API_URL}/{cve_id}.json", 
            headers=get_headers(),
            cert=cert_files,
            verify=verify
        )
        
        if response.status_code == 200:
            data = response.json()
            name = data.get('bugzilla', {}).get('description', '')
            if not name:
                name = data.get('details', '').split('.')[0] if data.get('details') else ''
            
            print(f"Found Red Hat info for {cve_id}")
            return {
                'name': name,
                'description': data.get('details', ''),
                'severity': data.get('threat_severity', '').upper(),
                'source': 'Red Hat',
                'date_added': data.get('public_date', ''),
                'required_action': data.get('mitigation', 'Review and patch if applicable')
            }
        else:
            print(f"No Red Hat info found for {cve_id}")
    except Exception as e:
        print(f"Error fetching from Red Hat for {cve_id}: {str(e)}")
    return None
