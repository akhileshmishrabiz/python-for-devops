import pandas as pd
import requests
import time
import argparse
import sys
from openpyxl import load_workbook

def fetch_cve_name(cve_id):
    """
    Fetch CVE name from the CISA Known Exploited Vulnerabilities (KEV) catalog
    
    Args:
        cve_id: A CVE ID (e.g., 'CVE-2021-44228')
    
    Returns:
        The vulnerability name or None if not found
    """
    # Ensure proper CVE ID format
    if not cve_id.startswith("CVE-"):
        if "-" in cve_id:
            cve_id = f"CVE-{cve_id}"
        else:
            cve_id = f"CVE-{cve_id}"
    
    # CISA KEV catalog URL
    url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
    
    try:
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            
            # Check if vulnerabilities were found
            if "vulnerabilities" in data:
                # Find the matching CVE
                for vuln in data.get("vulnerabilities", []):
                    if vuln.get("cveID") == cve_id:
                        return vuln.get("vulnerabilityName")
            
            # Not found in CISA KEV, try NIST NVD
            return fetch_from_nvd(cve_id)
        else:
            print(f"Error fetching from CISA: {response.status_code}")
            return fetch_from_nvd(cve_id)
    except Exception as e:
        print(f"Error with CISA API: {e}")
        return fetch_from_nvd(cve_id)

def fetch_from_nvd(cve_id):
    """Fallback to fetch CVE name from the NVD API"""
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    params = {"cveId": cve_id}
    
    try:
        response = requests.get(base_url, params=params)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get("totalResults", 0) > 0 and "vulnerabilities" in data:
                vulnerability = data["vulnerabilities"][0]["cve"]
                
                # Get description (default to English if available)
                descriptions = vulnerability.get("descriptions", [])
                for desc in descriptions:
                    if desc.get("lang") == "en":
                        return desc.get("value").split('.')[0]  # Get first sentence
                
                # If no English description, return first description
                if descriptions:
                    return descriptions[0]["value"].split('.')[0]
            
            return "No description available"
        else:
            return "NVD API Error"
    except Exception as e:
        return f"Error: {str(e)}"

def update_excel_with_cve_names(file_path):
    """
    Update the Excel file with CVE names
    
    Args:
        file_path: Path to the Excel file
    """
    try:
        # Load the workbook and get active sheet
        workbook = load_workbook(file_path)
        sheet = workbook.active
        
        # Find the last row with data
        max_row = sheet.max_row
        
        # Set header for the second column if it doesn't exist
        if sheet.cell(row=1, column=2).value is None:
            sheet.cell(row=1, column=2, value="CVE Name")
        
        # Process each row (starting from the second row, skipping header)
        processed = 0
        for row in range(2, max_row + 1):
            # Get CVE ID from first column
            cve_id = sheet.cell(row=row, column=1).value
            
            # Skip empty cells
            if cve_id is None or str(cve_id).strip() == "":
                continue
            
            cve_id = str(cve_id).strip()
            print(f"Processing {cve_id} (row {row}/{max_row})")
            
            # Fetch CVE name
            cve_name = fetch_cve_name(cve_id)
            
            # Write CVE name to second column
            sheet.cell(row=row, column=2, value=cve_name)
            
            processed += 1
            
            # Save workbook after each 5 CVEs (to avoid losing data in case of crash)
            if processed % 5 == 0:
                workbook.save(file_path)
                print(f"Progress saved after {processed} CVEs")
            
            # Wait to avoid rate limiting
            time.sleep(0.6)
        
        # Save the workbook
        workbook.save(file_path)
        print(f"Successfully updated {processed} CVEs in {file_path}")
        
    except Exception as e:
        print(f"Error processing Excel file: {e}")
        sys.exit(1)

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Fetch CVE names and update Excel file')
    parser.add_argument('excel_file', help='Path to Excel file containing CVE IDs in the first column')
    
    args = parser.parse_args()
    
    # Update the Excel file with CVE names
    update_excel_with_cve_names(args.excel_file)

if __name__ == "__main__":
    main()
